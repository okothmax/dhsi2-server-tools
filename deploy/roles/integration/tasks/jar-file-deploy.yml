---
- name: Ensure group exists for the service
  ansible.builtin.group:
    name: "{{ service_group }}"
    state: present

- name: Ensure user exists for the service
  ansible.builtin.user:
    name: "{{ service_user }}"
    group: "{{ service_group }}"
    shell: /bin/false
    system: true
    create_home: false

- name: "Update and upgrade"
  ansible.builtin.apt:
    upgrade: true
    update_cache: true
    cache_valid_time: 86400

- name: Ensure OpenJDK 17 is installed
  ansible.builtin.apt:
    name:
      - openjdk-17-jre-headless
      - acl
    state: present
    update_cache: true

- name: Ensure working directory exists
  ansible.builtin.file:
    path: "{{ working_directory }}"
    state: directory
    owner: "{{ service_user }}"
    group: "{{ service_group }}"
    mode: '0755'

# getting war file
- name: Copy the civil_registry jar to the server
  ansible.builtin.copy:
    src: "{{ jar_file_path }}"
    dest: "{{ working_directory }}/civil_registry_proxy.jar"
    owner: root
    group: root
    mode: '0644'  # Owner (root) has read and write, group and others have read-only

- name: Set read permission for service user on the JAR file
  ansible.builtin.acl:
    path: "{{ working_directory }}/civil_registry_proxy.jar"
    entity: "{{ service_user }}"
    etype: user
    permissions: r

- name: Create application.yml config
  ansible.builtin.template:
    src: application.yml.j2
    dest: /usr/local/etc/application.yml
    owner: root
    group: root
    mode: '0644'

# systemd service
- name: Copy dhis2Person.ds to the server
  ansible.builtin.copy:
    src: dhis2Person.ds
    dest: /dhis2Person.ds
    mode: '0644'
    owner: root
    group: root

- name: Create a systemd service file for civil_registry_proxy
  ansible.builtin.template:
    src: systemd_service.j2
    dest: "/etc/systemd/system/{{ service_name }}.service"
    owner: root
    group: root
    mode: '0644'
  register: systemd_service_results

- ansible.builtin.debug:
    msg: systemd_service_results

- name: Reload systemd to reflect new service
  ansible.builtin.command: systemctl daemon-reload

- name: Enable the service to start at boot
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    enabled: true

- name: Start the civil_registry_proxy service
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    state: started

- name: Ensure UFW is installed
  ansible.builtin.apt:
    name: ufw
    state: present
    update_cache: true

- name: Allow access to port 8080 from allowed IPs
  ansible.builtin.ufw:
    rule: allow
    port: "{{ service_port }}"
    proto: tcp
    from_ip: "{{ item }}"
  with_items: "{{ allowed_ips }}"

- name: Ensure UFW is enabled
  ansible.builtin.ufw:
    state: enabled
    policy: deny
