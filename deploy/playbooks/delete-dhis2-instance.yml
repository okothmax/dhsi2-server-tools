---
- hosts: all
  gather_facts: false
  vars_files:
    - ../vars/vars.yml
  tasks:
    - name: Delete instance containers
      vars:
        ansible_connection: local
      community.general.lxd_container:
        name: "{{ inventory_hostname }}"
        state: absent
      when: inventory_hostname in groups['instances'] and instance_state == 'deleted'

    # - name: Delete nginx rewrite rule 

    - name: Delete include location config 
      ansible.builtin.lineinfile:
        regexp: '^\s*include\s+conf\.d/upstream/{{ hostvars[item].fqdn | trim }}\.conf;$'
        # regexp: '^ *include +conf\.d/upstream/dhis\.conf;$'
        path: /etc/nginx/conf.d/{{ hostvars[item]['fqdn'] | trim  }}.conf
        line: "    include  conf.d/upstream/{{ hostvars[item]['fqdn'] | trim }}.conf;"

        state: absent
      loop: "{{ groups['instances'] }}"
      when: 
        - inventory_hostname in groups['web']
        - hostvars[item]['fqdn'] is defined and hostvars[item]['fqdn'] != None and (hostvars[item]['fqdn'] | trim != "") # Explore using default here
        - hostvars[item]['instance_state'] == "deleted"

    - name: Delete nginx location configuration on nginx
      ansible.builtin.file:
        path: /etc/nginx/conf.d/upstream/{{ item }}.conf
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['web']
        - hostvars[item]['instance_state'] == "deleted"
      notify: Reload Nginx

    - name: Delete database
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ item }}"
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        -  hostvars[item]['instance_state'] == "deleted"

    - name: Delete database role
      become: true
      become_user: postgres
      community.general.postgresql_user:
        name: "{{ item }}"
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        -  hostvars[item]['instance_state'] == 'deleted'

    - name: hecking postgresql Versions
      become: true
      become_user: postgres
      community.general.postgresql_info:
        filter: ver*
      register: postgresql_version_info
      # loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        # - inventory_hostname == hostvars[item]['database_host']

    - ansible.builtin.debug:
        msg: "{{ postgresql_version_info }}"
      when: inventory_hostname in groups['databases']

    - name: Delete access entry in postgresql pg_hba.conf
      become: true
      ansible.builtin.lineinfile:
        path: /etc/postgresql/{{ postgresql_version_info.version.major }}/main/pg_hba.conf
        regex: host .* {{ item }} .*
        state: absent
      loop: "{{ groups['instances'] }}"
      when:
        - inventory_hostname in groups['databases']
        - hostvars[item]['instance_state'] == 'deleted'
        - inventory_hostname == hostvars[item]['database_host']
      notify: Reload Postgres

    - name: Firewall | Open port 5432 from dhis2 instances
      community.general.ufw:
        rule: allow
        port: "{{ postgresql_port | default('5432') }}"
        src: "{{ hostvars[item]['ansible_host'] }}"
        proto: tcp
        comment: "Allow access from {{ item }} instance "
        delete: true
      loop: "{{ groups['instances'] }}"
      when:
        - hostvars[item]['instance_state'] == 'deleted'
        - inventory_hostname == hostvars[item]['database_host']
        - inventory_hostname in groups['databases']

  handlers:
    - name: Reload Nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded

    - name: Reload Postgres
      ansible.builtin.service:
        name: postgresql
        state: reloaded
